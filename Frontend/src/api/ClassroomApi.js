/*
 * YouChess API
 * This is YouChess API
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: nievange@ece.auth.gr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Classroom from '../model/Classroom';
import ClassroomSetEditorBody from '../model/ClassroomSetEditorBody';

/**
* Classroom service.
* @module api/ClassroomApi
* @version 1.0.0-oas3
*/
export default class ClassroomApi {

    /**
    * Constructs a new ClassroomApi. 
    * @alias module:api/ClassroomApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getClassroom operation.
     * @callback moduleapi/ClassroomApi~getClassroomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Classroom{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get classroom by ID
     * FR8 - The group participants must be able to join the classroom
     * @param {Number} groupID Classroom ID to get
     * @param {module:api/ClassroomApi~getClassroomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getClassroom(groupID, callback) {
      
      let postBody = null;
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling getClassroom");
      }

      let pathParams = {
        'groupID': groupID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Classroom;

      return this.apiClient.callApi(
        '/group/{groupID}/classroom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the groupGroupIDClassroomSetEditorPost operation.
     * @callback moduleapi/ClassroomApi~groupGroupIDClassroomSetEditorPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update studentID of the student who is allowed to edit the chessboard
     * FR10 - The coach must be able to change the ID of the student in control of the Chessboard
     * @param {module:model/ClassroomSetEditorBody} body JSON object with the studentID
     * @param {Number} groupID Classroom ID for the specific group
     * @param {module:api/ClassroomApi~groupGroupIDClassroomSetEditorPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    groupGroupIDClassroomSetEditorPost(body, groupID, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupGroupIDClassroomSetEditorPost");
      }
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling groupGroupIDClassroomSetEditorPost");
      }

      let pathParams = {
        'groupID': groupID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/group/{groupID}/classroom/setEditor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateClassroom operation.
     * @callback moduleapi/ClassroomApi~updateClassroomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Classroom{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the classroom
     * FR12 - The coach must be able to change who has the permission to edit the chessboard
     * @param {module:model/Classroom} body Classroom object with the updated user list and/or editing permission owner
     * @param {Number} groupID 
     * @param {module:api/ClassroomApi~updateClassroomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateClassroom(body, groupID, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateClassroom");
      }
      // verify the required parameter 'groupID' is set
      if (groupID === undefined || groupID === null) {
        throw new Error("Missing the required parameter 'groupID' when calling updateClassroom");
      }

      let pathParams = {
        'groupID': groupID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Classroom;

      return this.apiClient.callApi(
        '/group/{groupID}/classroom', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}